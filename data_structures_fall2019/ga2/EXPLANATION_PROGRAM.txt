TYLER HU - ID is 0276538
Mitchell Montalvo - ID is 1483765 
Armando Mata - ID is 1656706

NOTE: We used Sunny's sample code as a base for our program

PROGRAM STRUCTURE

Program is divided into three main sections: 1) CLASSES (Player, Bench, Court), 2) MAIN FUNCTIONS (mergelists, sortTime, sortAge, shuffleArray), and 3) MAIN. 

The CLASS Player constructs nodes with data such as a player’s jersey number (integer), age (integer), playing position (integer), and whether he/she is on the court or bench (string); note that the class initializes the node’s court time = 0 and total time = 0 for later use.

The CLASS Bench constructs a doubly linked list of Player nodes and contains functions to.

The CLASS Court constructs a circularly linked list of Player nodes and contains functions to.

The MAIN FUNCTION shuffleArray is a template function meant to simulate random generation of values for a Player node. It accepts arrays of sequential numbers and randomly swaps the values inside the array. It can also randomly swap Player objects inside a Player array such as lockerRoom. NOTE: this shuffle function was inspired by code examples from the stack overflow website.

The MAIN FUNCTIONS sortTime and sortAge utilize bubble sort to swap values in the node list, not the actual nodes themselves. NOTE: these sort functions were inspired by code examples from the geeks for geeks website.

MAIN contains the locker room, the game simulation (four quarters x 12 minutes each), and the generation of our three output reports. First the Locker room is created. It is a shuffled array of Player objects with randonly generated values for player number and age. Then the court and bench are generated from the locker room. Then the game simulation is ran with functions that 1) first check for the oldest player, 2) then swap court and bench players, and 3) calculate total played.

REPORT 3 is generated as the game plays out. Each time we replace a player, the replacement and the player replaced are added to the report, as well as the quarter they were switched in.

After the main game is “played”, we merge the Court and Bench lists into one final circular, doubly linked list. Using this list we generate reports 1 and 2.

REPORT 1 is generated by first sorting our final list in descending order by their total time played in-game. Then we simply output this data displaying the player's number and minutes played.

REPORT 2 is generated by sorting our final list in ascending order by age. Then we simply output this data displaying the players age, number, and minutes played.